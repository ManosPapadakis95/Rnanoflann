// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rnanoflann.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// knn
List knn(arma::mat data, arma::mat points, arma::uword k, const std::string search, const double eps, const bool sorted, const double radius, const bool parallel);
static SEXP _Rnanoflann_knn_try(SEXP dataSEXP, SEXP pointsSEXP, SEXP kSEXP, SEXP searchSEXP, SEXP epsSEXP, SEXP sortedSEXP, SEXP radiusSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string >::type search(searchSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type sorted(sortedSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(knn(data, points, k, search, eps, sorted, radius, parallel));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rnanoflann_knn(SEXP dataSEXP, SEXP pointsSEXP, SEXP kSEXP, SEXP searchSEXP, SEXP epsSEXP, SEXP sortedSEXP, SEXP radiusSEXP, SEXP parallelSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rnanoflann_knn_try(dataSEXP, pointsSEXP, kSEXP, searchSEXP, epsSEXP, sortedSEXP, radiusSEXP, parallelSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Rnanoflann_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*knn)(arma::mat,arma::mat,arma::uword,const std::string,const double,const bool,const double,const bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Rnanoflann_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Rnanoflann", "_Rnanoflann_knn", (DL_FUNC)_Rnanoflann_knn_try);
    R_RegisterCCallable("Rnanoflann", "_Rnanoflann_RcppExport_validate", (DL_FUNC)_Rnanoflann_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rnanoflann_knn", (DL_FUNC) &_Rnanoflann_knn, 8},
    {"_Rnanoflann_RcppExport_registerCCallable", (DL_FUNC) &_Rnanoflann_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rnanoflann(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
